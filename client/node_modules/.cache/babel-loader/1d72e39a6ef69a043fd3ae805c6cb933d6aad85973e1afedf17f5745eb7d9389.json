{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.startPayment && _ctx.startPayment(...args))\n  }, \"Pay Now\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","args","_ctx","startPayment"],"sources":["/home/jhasaab/Desktop/tedX-backend/razor/src/components/PaymentComponent.vue"],"sourcesContent":["<template>\n    <div>\n      <button @click=\"startPayment\">Pay Now</button>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n\n global Razorpay ;// Add this line\n  \n  export default {\n    data() {\n      return {\n        order: null,\n      };\n    },\n    async mounted() {\n      await this.createOrder();\n    },\n    methods: {\n      async createOrder() {\n        const amount = 500; // Example amount\n        const currency = 'INR';\n        const receipt = 'receipt_order_1';\n  \n        try {\n          const orderResponse = await axios.post('http://localhost:3000/create-order', { amount, currency, receipt });\n          this.order = orderResponse.data;\n        } catch (error) {\n          console.error('Error creating order:', error);\n        }\n      },\n      async startPayment() {\n        if (!this.order) {\n          console.error('Order not created yet');\n          return;\n        }\n  \n        const options = {\n          key: process.env.VUE_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Dashboard\n          amount: this.order.amount,\n          currency: this.order.currency,\n          name: \"Your Company Name\",\n          description: \"Test Transaction\",\n          order_id: this.order.id,\n          handler: async function (response) {\n            const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\n            const verifyResponse = await axios.post('http://localhost:3000/verify-payment', {\n              order_id: razorpay_order_id,\n              payment_id: razorpay_payment_id,\n              signature: razorpay_signature,\n            });\n  \n            if (verifyResponse.data.success) {\n              alert(\"Payment successful\");\n            } else {\n              alert(\"Payment verification failed\");\n            }\n          },\n          prefill: {\n            name: \"Your Name\",\n            email: \"email@example.com\",\n            contact: \"9999999999\"\n          },\n          notes: {\n            address: \"Your Address\"\n          },\n          theme: {\n            color: \"#3399cc\"\n          }\n        };\n  \n        const rzp1 = new Razorpay(options);\n        rzp1.open();\n      }\n    }\n  };\n  </script>\n  "],"mappings":";;uBACIA,mBAAA,CAEM,cADJC,mBAAA,CAA8C;IAArCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,YAAA,IAAAD,IAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,SAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}