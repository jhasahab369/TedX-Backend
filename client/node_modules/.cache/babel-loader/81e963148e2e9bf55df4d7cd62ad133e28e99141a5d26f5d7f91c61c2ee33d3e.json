{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      order: null\n    };\n  },\n  async mounted() {\n    await this.createOrder();\n  },\n  methods: {\n    async createOrder() {\n      const amount = 500; // Example amount\n      const currency = 'INR';\n      const receipt = 'receipt_order_1';\n      try {\n        const orderResponse = await axios.post('http://localhost:3000/create-order', {\n          amount,\n          currency,\n          receipt\n        });\n        this.order = orderResponse.data;\n      } catch (error) {\n        console.error('Error creating order:', error);\n      }\n    },\n    async startPayment() {\n      if (!this.order) {\n        console.error('Order not created yet');\n        return;\n      }\n      const options = {\n        key: process.env.VUE_APP_RAZORPAY_KEY_ID,\n        // Enter the Key ID generated from the Dashboard\n        amount: this.order.amount,\n        currency: this.order.currency,\n        name: \"Your Company Name\",\n        description: \"Test Transaction\",\n        order_id: this.order.id,\n        handler: async function (response) {\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          const verifyResponse = await axios.post('http://localhost:3000/verify-payment', {\n            order_id: razorpay_order_id,\n            payment_id: razorpay_payment_id,\n            signature: razorpay_signature\n          });\n          if (verifyResponse.data.success) {\n            alert(\"Payment successful\");\n          } else {\n            alert(\"Payment verification failed\");\n          }\n        },\n        prefill: {\n          name: \"Your Name\",\n          email: \"email@example.com\",\n          contact: \"9999999999\"\n        },\n        notes: {\n          address: \"Your Address\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        }\n      };\n      const rzp1 = new Razorpay(options);\n      rzp1.open();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","order","mounted","createOrder","methods","amount","currency","receipt","orderResponse","post","error","console","startPayment","options","key","process","env","VUE_APP_RAZORPAY_KEY_ID","name","description","order_id","id","handler","response","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyResponse","payment_id","signature","success","alert","prefill","email","contact","notes","address","theme","color","rzp1","Razorpay","open"],"sources":["/home/jhasaab/Desktop/tedX-backend/razor/src/components/PaymentComponent.vue"],"sourcesContent":["<template>\n    <div>\n      <button @click=\"startPayment\">Pay Now</button>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        order: null,\n      };\n    },\n    async mounted() {\n      await this.createOrder();\n    },\n    methods: {\n      async createOrder() {\n        const amount = 500; // Example amount\n        const currency = 'INR';\n        const receipt = 'receipt_order_1';\n  \n        try {\n          const orderResponse = await axios.post('http://localhost:3000/create-order', { amount, currency, receipt });\n          this.order = orderResponse.data;\n        } catch (error) {\n          console.error('Error creating order:', error);\n        }\n      },\n      async startPayment() {\n        if (!this.order) {\n          console.error('Order not created yet');\n          return;\n        }\n  \n        const options = {\n          key: process.env.VUE_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Dashboard\n          amount: this.order.amount,\n          currency: this.order.currency,\n          name: \"Your Company Name\",\n          description: \"Test Transaction\",\n          order_id: this.order.id,\n          handler: async function (response) {\n            const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\n            const verifyResponse = await axios.post('http://localhost:3000/verify-payment', {\n              order_id: razorpay_order_id,\n              payment_id: razorpay_payment_id,\n              signature: razorpay_signature,\n            });\n  \n            if (verifyResponse.data.success) {\n              alert(\"Payment successful\");\n            } else {\n              alert(\"Payment verification failed\");\n            }\n          },\n          prefill: {\n            name: \"Your Name\",\n            email: \"email@example.com\",\n            contact: \"9999999999\"\n          },\n          notes: {\n            address: \"Your Address\"\n          },\n          theme: {\n            color: \"#3399cc\"\n          }\n        };\n  \n        const rzp1 = new Razorpay(options);\n        rzp1.open();\n      }\n    }\n  };\n  </script>\n  "],"mappings":"AAOE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,MAAME,MAAK,GAAI,GAAG,EAAE;MACpB,MAAMC,QAAO,GAAI,KAAK;MACtB,MAAMC,OAAM,GAAI,iBAAiB;MAEjC,IAAI;QACF,MAAMC,aAAY,GAAI,MAAMT,KAAK,CAACU,IAAI,CAAC,oCAAoC,EAAE;UAAEJ,MAAM;UAAEC,QAAQ;UAAEC;QAAQ,CAAC,CAAC;QAC3G,IAAI,CAACN,KAAI,GAAIO,aAAa,CAACR,IAAI;MACjC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACD,MAAME,YAAYA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACX,KAAK,EAAE;QACfU,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAC;QACtC;MACF;MAEA,MAAMG,OAAM,GAAI;QACdC,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB;QAAE;QAC1CZ,MAAM,EAAE,IAAI,CAACJ,KAAK,CAACI,MAAM;QACzBC,QAAQ,EAAE,IAAI,CAACL,KAAK,CAACK,QAAQ;QAC7BY,IAAI,EAAE,mBAAmB;QACzBC,WAAW,EAAE,kBAAkB;QAC/BC,QAAQ,EAAE,IAAI,CAACnB,KAAK,CAACoB,EAAE;QACvBC,OAAO,EAAE,eAAAA,CAAgBC,QAAQ,EAAE;UACjC,MAAM;YAAEC,iBAAiB;YAAEC,mBAAmB;YAAEC;UAAmB,IAAIH,QAAQ;UAC/E,MAAMI,cAAa,GAAI,MAAM5B,KAAK,CAACU,IAAI,CAAC,sCAAsC,EAAE;YAC9EW,QAAQ,EAAEI,iBAAiB;YAC3BI,UAAU,EAAEH,mBAAmB;YAC/BI,SAAS,EAAEH;UACb,CAAC,CAAC;UAEF,IAAIC,cAAc,CAAC3B,IAAI,CAAC8B,OAAO,EAAE;YAC/BC,KAAK,CAAC,oBAAoB,CAAC;UAC7B,OAAO;YACLA,KAAK,CAAC,6BAA6B,CAAC;UACtC;QACF,CAAC;QACDC,OAAO,EAAE;UACPd,IAAI,EAAE,WAAW;UACjBe,KAAK,EAAE,mBAAmB;UAC1BC,OAAO,EAAE;QACX,CAAC;QACDC,KAAK,EAAE;UACLC,OAAO,EAAE;QACX,CAAC;QACDC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT;MACF,CAAC;MAED,MAAMC,IAAG,GAAI,IAAIC,QAAQ,CAAC3B,OAAO,CAAC;MAClC0B,IAAI,CAACE,IAAI,CAAC,CAAC;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}