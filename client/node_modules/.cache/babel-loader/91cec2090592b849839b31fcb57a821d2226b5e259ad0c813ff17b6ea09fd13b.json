{"ast":null,"code":"import axios from 'axios';\n\n/* global Razorpay */ // Inform ESLint that Razorpay is a global variable\n\nexport default {\n  data() {\n    return {\n      order: null\n    };\n  },\n  async mounted() {\n    await this.createOrder();\n  },\n  methods: {\n    async createOrder() {\n      const amount = 500; // Example amount\n      const currency = 'INR';\n      const receipt = `receipt_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n      try {\n        const orderResponse = await axios.post('http://localhost:3000/create-order', {\n          amount,\n          currency,\n          receipt\n        });\n        this.order = orderResponse.data;\n      } catch (error) {\n        console.error('Error creating order:', error);\n      }\n    },\n    startPayment() {\n      if (!this.order) {\n        console.error('Order not created yet');\n        return;\n      }\n      const options = {\n        key: process.env.VUE_APP_RAZORPAY_KEY_ID,\n        // Enter the Key ID generated from the Dashboard\n        amount: this.order.amount,\n        currency: this.order.currency,\n        name: \"Your Company Name\",\n        description: \"Test Transaction\",\n        order_id: this.order.id,\n        handler: async response => {\n          const {\n            razorpay_order_id,\n            razorpay_payment_id,\n            razorpay_signature\n          } = response;\n          try {\n            const verifyResponse = await axios.post('http://localhost:3000/verify-payment', {\n              order_id: razorpay_order_id,\n              payment_id: razorpay_payment_id,\n              signature: razorpay_signature\n            });\n            if (verifyResponse.data.success) {\n              alert(\"Payment successful\");\n            } else {\n              alert(\"Payment verification failed\");\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n          }\n        },\n        prefill: {\n          name: \"Your Name\",\n          email: \"email@example.com\",\n          contact: \"9999999999\"\n        },\n        notes: {\n          address: \"Your Address\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        }\n      };\n      const rzp1 = new Razorpay(options);\n      rzp1.open();\n    }\n  }\n};","map":{"version":3,"names":["axios","data","order","mounted","createOrder","methods","amount","currency","receipt","Date","now","Math","floor","random","orderResponse","post","error","console","startPayment","options","key","process","env","VUE_APP_RAZORPAY_KEY_ID","name","description","order_id","id","handler","response","razorpay_order_id","razorpay_payment_id","razorpay_signature","verifyResponse","payment_id","signature","success","alert","prefill","email","contact","notes","address","theme","color","rzp1","Razorpay","open"],"sources":["/home/jhasaab/Desktop/tedX-backend/razor/src/components/PaymentComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"startPayment\">Pay Now</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\n/* global Razorpay */ // Inform ESLint that Razorpay is a global variable\n\nexport default {\n  data() {\n    return {\n      order: null,\n    };\n  },\n  async mounted() {\n    await this.createOrder();\n  },\n  methods: {\n    async createOrder() {\n      const amount = 500; // Example amount\n      const currency = 'INR';\n      const receipt = `receipt_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n\n\n      try {\n        const orderResponse = await axios.post('http://localhost:3000/create-order', { amount, currency, receipt });\n        this.order = orderResponse.data;\n      } catch (error) {\n        console.error('Error creating order:', error);\n      }\n    },\n    startPayment() {\n      if (!this.order) {\n        console.error('Order not created yet');\n        return;\n      }\n\n      const options = {\n        key: process.env.VUE_APP_RAZORPAY_KEY_ID, // Enter the Key ID generated from the Dashboard\n        amount: this.order.amount,\n        currency: this.order.currency,\n        name: \"Your Company Name\",\n        description: \"Test Transaction\",\n        order_id: this.order.id,\n        handler: async (response) => {\n          const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;\n          try {\n            const verifyResponse = await axios.post('http://localhost:3000/verify-payment', {\n              order_id: razorpay_order_id,\n              payment_id: razorpay_payment_id,\n              signature: razorpay_signature,\n            });\n\n            if (verifyResponse.data.success) {\n              alert(\"Payment successful\");\n            } else {\n              alert(\"Payment verification failed\");\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n          }\n        },\n        prefill: {\n          name: \"Your Name\",\n          email: \"email@example.com\",\n          contact: \"9999999999\"\n        },\n        notes: {\n          address: \"Your Address\"\n        },\n        theme: {\n          color: \"#3399cc\"\n        }\n      };\n\n      const rzp1 = new Razorpay(options);\n      rzp1.open();\n    }\n  }\n};\n</script>\n\n<style>\n/* Add any styles for your component here */\n</style>\n"],"mappings":"AAOA,OAAOA,KAAI,MAAO,OAAO;;AAEzB,sBAAsB;;AAEtB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,MAAME,MAAK,GAAI,GAAG,EAAE;MACpB,MAAMC,QAAO,GAAI,KAAK;MACtB,MAAMC,OAAM,GAAI,WAAWC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,IAAI,CAAC,EAAE;MAG3E,IAAI;QACF,MAAMC,aAAY,GAAI,MAAMd,KAAK,CAACe,IAAI,CAAC,oCAAoC,EAAE;UAAET,MAAM;UAAEC,QAAQ;UAAEC;QAAQ,CAAC,CAAC;QAC3G,IAAI,CAACN,KAAI,GAAIY,aAAa,CAACb,IAAI;MACjC,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACDE,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAAChB,KAAK,EAAE;QACfe,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAC;QACtC;MACF;MAEA,MAAMG,OAAM,GAAI;QACdC,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB;QAAE;QAC1CjB,MAAM,EAAE,IAAI,CAACJ,KAAK,CAACI,MAAM;QACzBC,QAAQ,EAAE,IAAI,CAACL,KAAK,CAACK,QAAQ;QAC7BiB,IAAI,EAAE,mBAAmB;QACzBC,WAAW,EAAE,kBAAkB;QAC/BC,QAAQ,EAAE,IAAI,CAACxB,KAAK,CAACyB,EAAE;QACvBC,OAAO,EAAE,MAAOC,QAAQ,IAAK;UAC3B,MAAM;YAAEC,iBAAiB;YAAEC,mBAAmB;YAAEC;UAAmB,IAAIH,QAAQ;UAC/E,IAAI;YACF,MAAMI,cAAa,GAAI,MAAMjC,KAAK,CAACe,IAAI,CAAC,sCAAsC,EAAE;cAC9EW,QAAQ,EAAEI,iBAAiB;cAC3BI,UAAU,EAAEH,mBAAmB;cAC/BI,SAAS,EAAEH;YACb,CAAC,CAAC;YAEF,IAAIC,cAAc,CAAChC,IAAI,CAACmC,OAAO,EAAE;cAC/BC,KAAK,CAAC,oBAAoB,CAAC;YAC7B,OAAO;cACLA,KAAK,CAAC,6BAA6B,CAAC;YACtC;UACF,EAAE,OAAOrB,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAClD;QACF,CAAC;QACDsB,OAAO,EAAE;UACPd,IAAI,EAAE,WAAW;UACjBe,KAAK,EAAE,mBAAmB;UAC1BC,OAAO,EAAE;QACX,CAAC;QACDC,KAAK,EAAE;UACLC,OAAO,EAAE;QACX,CAAC;QACDC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT;MACF,CAAC;MAED,MAAMC,IAAG,GAAI,IAAIC,QAAQ,CAAC3B,OAAO,CAAC;MAClC0B,IAAI,CAACE,IAAI,CAAC,CAAC;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}